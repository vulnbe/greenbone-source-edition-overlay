diff --git a/gsad/src/gsad_http.c b/gsad/src/gsad_http.c
index f63e1335e..f87144aa5 100644
--- a/gsad/src/gsad_http.c
+++ b/gsad/src/gsad_http.c
@@ -397,7 +397,7 @@ create_not_found_response (const gchar *url, cmd_response_data_t *response_data)
 
   cmd_response_data_set_status_code (response_data, MHD_HTTP_NOT_FOUND);
 
-  gchar *msg = g_strdup_printf (
+  gchar *msg = g_markup_printf_escaped (
     "<!DOCTYPE html>"
     "<html>"
     "<head>"

diff --git a/gsad/src/gsad_http_handler.c b/gsad/src/gsad_http_handler.c
index 01377e14c..319c474d4 100644
--- a/gsad/src/gsad_http_handler.c
+++ b/gsad/src/gsad_http_handler.c
@@ -327,14 +327,6 @@ handle_validate (http_connection_t *connection, const char *method,
   return http_handler_next (connection, method, url, con_info, handler, data);
 }
 
-int
-handle_not_found (http_connection_t *connection, const char *method,
-                  const char *url, gsad_connection_info_t *con_info,
-                  http_handler_t *handler, void *data)
-{
-  return handler_send_not_found (connection, url);
-}
-
 int
 handle_invalid_method (http_connection_t *connection, const char *method,
                        const char *url, gsad_connection_info_t *con_info,
@@ -740,7 +732,6 @@ http_handler_t *
 init_http_handlers ()
 {
   http_handler_t *method_router;
-  http_handler_t *not_found_handler;
   http_handler_t *gmp_post_handler;
   http_handler_t *url_handlers;
 
@@ -751,7 +742,6 @@ init_http_handlers ()
   handlers = http_handler_new (handle_validate);
 
   method_router = method_router_new ();
-  not_found_handler = http_handler_new (handle_not_found);
   gmp_post_handler = http_handler_new (handle_gmp_post);
 
   http_handler_add (handlers, method_router);
@@ -787,8 +777,7 @@ init_http_handlers ()
   http_handler_add (url_handlers, system_report_url_handler);
   http_handler_add (url_handlers, logout_url_handler);
 
-  url_handler_add_func (url_handlers, "^/.*$", handle_index);
-  http_handler_add (url_handlers, not_found_handler);
+  http_handler_add (url_handlers, http_handler_new (handle_index));
 
   method_router_set_get_handler (method_router, url_handlers);
   method_router_set_post_handler (method_router, gmp_post_handler);

diff --git a/gsad/src/gsad_http.c b/gsad/src/gsad_http.c
index f87144aa5..9fcbe94b3 100644
--- a/gsad/src/gsad_http.c
+++ b/gsad/src/gsad_http.c
@@ -397,7 +397,7 @@ create_not_found_response (const gchar *url, cmd_response_data_t *response_data)
 
   cmd_response_data_set_status_code (response_data, MHD_HTTP_NOT_FOUND);
 
-  gchar *msg = g_markup_printf_escaped (
+  gchar *msg =
     "<!DOCTYPE html>"
     "<html>"
     "<head>"
@@ -408,12 +408,10 @@ create_not_found_response (const gchar *url, cmd_response_data_t *response_data)
     "<body>"
     "<h1>URL not found</h1>"
     "<p>"
-    "The requested URL %s is not available"
+    "The requested URL is not available"
     "</p>"
     "</body>"
-    "</html>",
-    url
-  );
+    "</html>";
 
   cmd_response_data_set_content_type (response_data,
                                       GSAD_CONTENT_TYPE_TEXT_HTML);
@@ -422,7 +420,6 @@ create_not_found_response (const gchar *url, cmd_response_data_t *response_data)
 
   len = cmd_response_data_get_content_length (response_data);
   response = MHD_create_response_from_buffer (len, msg, MHD_RESPMEM_MUST_COPY);
-  g_free (msg);
   return response;
 }
 

diff --git a/gsad/src/gsad_http_handler.c b/gsad/src/gsad_http_handler.c
index 319c474d4..0c0bb4ed9 100644
--- a/gsad/src/gsad_http_handler.c
+++ b/gsad/src/gsad_http_handler.c
@@ -313,7 +313,9 @@ handle_validate (http_connection_t *connection, const char *method,
   /* Prevent guest link from leading to URL redirection. */
   if (url && (url[0] == '/') && (url[1] == '/'))
     {
-      return handler_send_not_found (connection, url);
+      send_response (connection, BAD_REQUEST_PAGE, MHD_HTTP_BAD_REQUEST, NULL,
+                     GSAD_CONTENT_TYPE_TEXT_HTML, NULL, 0);
+      return MHD_YES;
     }
 
   /* Many Glib functions require valid UTF-8. */

diff --git a/gsad/src/gsad_http.c b/gsad/src/gsad_http.c
index 9fcbe94b3..bc5455e82 100644
--- a/gsad/src/gsad_http.c
+++ b/gsad/src/gsad_http.c
@@ -423,26 +423,6 @@ create_not_found_response (const gchar *url, cmd_response_data_t *response_data)
   return response;
 }
 
-/**
- * @brief Send a 404 response for a request
- *
- * @param[in]  connection  Connection handle, e.g. used to send response.
- * @param[in]  url         Requested url.
- *
- * @return MHD_YES on success. MHD_NO on errors.
- */
-int
-handler_send_not_found (http_connection_t *connection, const gchar *url)
-{
-  http_response_t *response;
-  cmd_response_data_t *response_data;
-
-  response_data = cmd_response_data_new ();
-
-  response = create_not_found_response (url, response_data);
-  return handler_send_response (connection, response, response_data, NULL);
-}
-
 /**
  * @brief Allow for reauthentication of a user
  *
diff --git a/gsad/src/gsad_http.h b/gsad/src/gsad_http.h
index d2df6f65f..167d934de 100644
--- a/gsad/src/gsad_http.h
+++ b/gsad/src/gsad_http.h
@@ -150,9 +150,6 @@ int
 handler_send_response (http_connection_t *connection, http_response_t *response,
                        cmd_response_data_t *response_data, const gchar *sid);
 
-int
-handler_send_not_found (http_connection_t *connection, const gchar *url);
-
 /**
  * @brief Content types.
  */

diff --git a/gsad/src/gsad_http.c b/gsad/src/gsad_http.c
index bc5455e82..4a23a0ac9 100644
--- a/gsad/src/gsad_http.c
+++ b/gsad/src/gsad_http.c
@@ -384,13 +384,12 @@ handler_create_response (http_connection_t *connection, gchar *data,
 /**
  * @brief Create a default 404 (not found) http response
  *
- * @param[in]   url                 Requested (not found) url
  * @param[out]  response_data       Response data to return
  *
  * @return A http response
  */
 http_response_t *
-create_not_found_response (const gchar *url, cmd_response_data_t *response_data)
+create_not_found_response (cmd_response_data_t *response_data)
 {
   http_response_t *response;
   int len;
@@ -695,7 +694,7 @@ file_content_response (http_connection_t *connection, const char *url,
   if (file == NULL)
     {
       g_debug ("File %s failed, ", path);
-      return create_not_found_response (url, response_data);
+      return create_not_found_response (response_data);
     }
 
   /* Guess content type. */
@@ -706,14 +705,14 @@ file_content_response (http_connection_t *connection, const char *url,
       /* File information could not be retrieved. */
       g_critical ("%s: file <%s> can not be stat'ed.\n", __FUNCTION__, path);
       fclose (file);
-      return create_not_found_response (url, response_data);
+      return create_not_found_response (response_data);
     }
 
   /* Make sure the requested path really is a file. */
   if ((buf.st_mode & S_IFMT) != S_IFREG)
     {
       fclose (file);
-      return create_not_found_response (url, response_data);
+      return create_not_found_response (response_data);
     }
 
   response = MHD_create_response_from_callback (
